programa ::= declaracion-funcion+

declaracion-funcion ::= "fun" IDENT "(" argumentos ")" "locals" variables-locales "begin" sentencias "end"

argumentos ::= lista-argumentos | ε

lista-argumentos ::= identificador ":" tipo-dato ("," identificador ":" tipo-dato)*

variables-locales ::= declaracion-variable (";" declaracion-variable)* | ε

declaracion-variable ::= identificador ":" tipo-dato

sentencias ::= sentencia (";" sentencia)* | ε

sentencia ::= sentencia-asignacion
          | sentencia-while
          | sentencia-if
          | sentencia-print
          | sentencia-write
          | sentencia-read
          | sentencia-return
          | sentencia-llamada-funcion
          | "skip"
          | "break"
          | bloque

sentencia-asignacion ::= identificador ":=" expresion

sentencia-while ::= "while" expresion "do" sentencia

sentencia-if ::= "if" "(" expresion ")" "then" sentencia ("else" sentencia)?

sentencia-print ::= "print" "(" expresion-list ")"

sentencia-write ::= "write" "(" expresion ")"

sentencia-read ::= "read" "(" identificador ")"

sentencia-return ::= "return" expresion

sentencia-llamada-funcion ::= identificador "(" (expresion ("," expresion)*)? ")"

bloque ::= "begin" sentencias "end"

tipo-dato ::= "int" | "float"

expresion-list ::= expresion ("," expresion)*

expresion ::= expresion-aritmetica
          | expresion-relacional
          | "-" expresion
          | "+" expresion
          | "(" expresion ")"
          | identificador
          | numero

expresion-aritmetica ::= expresion ("+" | "-" | "*" | "/") expresion

expresion-relacional ::= expresion ("<" | "<=" | ">" | ">=" | "==" | "!=") expresion

identificador ::= letra (letra | digito)*

numero ::= entero | flotante

entero ::= digito+

flotante ::= digito+ "." digito+

letra ::= "a" | "b" | ... | "z" | "A" | "B" | ... | "Z"

digito ::= "0" | "1" | ... | "9"

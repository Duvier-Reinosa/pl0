Grammar:

Rule 0     S' -> programDefinition
Rule 1     programDefinition -> program IDENTIFIER SEMICOLON

Unused terminals:

    BREAK
    BEGIN
    RETURN
    ICONST
    RBRACKET
    GT
    THEN
    FUN
    RPAREN
    PLUS
    DIVIDE
    INT
    EQ
    ASSIGN
    SKIP
    NE
    PRINT
    WRITE
    COMMA
    MINUS
    READ
    LT
    SCONST
    FOR
    ELSE
    LBRACKET
    TIMES
    FLOAT
    END
    COLON
    LOCALS
    RCONST
    IF
    LPAREN
    LE
    GE

Terminals, with rules where they appear:

ASSIGN               : 
BEGIN                : 
BREAK                : 
COLON                : 
COMMA                : 
DIVIDE               : 
ELSE                 : 
END                  : 
EQ                   : 
FLOAT                : 
FOR                  : 
FUN                  : 
GE                   : 
GT                   : 
ICONST               : 
IDENTIFIER           : 1
IF                   : 
INT                  : 
LBRACKET             : 
LE                   : 
LOCALS               : 
LPAREN               : 
LT                   : 
MINUS                : 
NE                   : 
PLUS                 : 
PRINT                : 
RBRACKET             : 
RCONST               : 
READ                 : 
RETURN               : 
RPAREN               : 
SCONST               : 
SEMICOLON            : 1
SKIP                 : 
THEN                 : 
TIMES                : 
WRITE                : 
error                : 
program              : 1

Nonterminals, with rules where they appear:

programDefinition    : 0


state 0

    (0) S' -> . programDefinition
    (1) programDefinition -> . program IDENTIFIER SEMICOLON
    program         shift and go to state 2

    programDefinition              shift and go to state 1

state 1

    (0) S' -> programDefinition .


state 2

    (1) programDefinition -> program . IDENTIFIER SEMICOLON
    IDENTIFIER      shift and go to state 3


state 3

    (1) programDefinition -> program IDENTIFIER . SEMICOLON
    SEMICOLON       shift and go to state 4


state 4

    (1) programDefinition -> program IDENTIFIER SEMICOLON .
    $end            reduce using rule 1 (programDefinition -> program IDENTIFIER SEMICOLON .)

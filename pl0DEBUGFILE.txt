Grammar:

Rule 0     S' -> programDefinition
Rule 1     programDefinition -> program IDENTIFIER SEMICOLON NEWLINE

Unused terminals:

    ASSIGN
    RBRACKET
    THEN
    GE
    RCONST
    DIVIDE
    LOCALS
    NE
    LPAREN
    COLON
    MINUS
    FLOAT
    BREAK
    BEGIN
    LT
    FOR
    INT
    PLUS
    READ
    GT
    COMMA
    IF
    END
    RETURN
    LE
    ICONST
    PRINT
    ELSE
    TIMES
    LBRACKET
    WRITE
    RPAREN
    FUN
    SCONST
    SKIP
    EQ

Terminals, with rules where they appear:

ASSIGN               : 
BEGIN                : 
BREAK                : 
COLON                : 
COMMA                : 
DIVIDE               : 
ELSE                 : 
END                  : 
EQ                   : 
FLOAT                : 
FOR                  : 
FUN                  : 
GE                   : 
GT                   : 
ICONST               : 
IDENTIFIER           : 1
IF                   : 
INT                  : 
LBRACKET             : 
LE                   : 
LOCALS               : 
LPAREN               : 
LT                   : 
MINUS                : 
NE                   : 
NEWLINE              : 1
PLUS                 : 
PRINT                : 
RBRACKET             : 
RCONST               : 
READ                 : 
RETURN               : 
RPAREN               : 
SCONST               : 
SEMICOLON            : 1
SKIP                 : 
THEN                 : 
TIMES                : 
WRITE                : 
error                : 
program              : 1

Nonterminals, with rules where they appear:

programDefinition    : 0


state 0

    (0) S' -> . programDefinition
    (1) programDefinition -> . program IDENTIFIER SEMICOLON NEWLINE
    program         shift and go to state 2

    programDefinition              shift and go to state 1

state 1

    (0) S' -> programDefinition .


state 2

    (1) programDefinition -> program . IDENTIFIER SEMICOLON NEWLINE
    IDENTIFIER      shift and go to state 3


state 3

    (1) programDefinition -> program IDENTIFIER . SEMICOLON NEWLINE
    SEMICOLON       shift and go to state 4


state 4

    (1) programDefinition -> program IDENTIFIER SEMICOLON . NEWLINE
    NEWLINE         shift and go to state 5


state 5

    (1) programDefinition -> program IDENTIFIER SEMICOLON NEWLINE .
    $end            reduce using rule 1 (programDefinition -> program IDENTIFIER SEMICOLON NEWLINE .)
